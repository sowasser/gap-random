---
title: "GCP Instructions"
author: "Sophia Wassermann"
format: html
editor: visual
---

# Introduction

Before beginning this process, please check with Sophia Wassermann, Emily Markowitz, or OFIS to confirm that a computing instance and an Rstudio server have been set up for your username.

# Intital Setup

## Setting up Google Cloud Provider (GCP)

GCP is accessed through the command line on your local machine. First, you will need to install Google Cloud CLI: "language-specific Cloud Client Libraries" that make it "easier for you to interact with Google Cloud APIs in your language of choice". Full instructions are [here](https://cloud.google.com/sdk/docs/install-sdk). The installation instructions are specific to your operating system, under 'Installing the latest gcloud CLI version'.

Specific instructions:

-   When prompted, specify `ggn-nmfs-afscdsm-dev-1` as the default project.
-   There is no need to configure compute region and zone when prompted.

## Connecting to your instance

Because usage of GCP is metered, you will need to start and, importantly **stop**, your instance every time you want to use it.

1.  Navigate to the [AFSC dev server on GCP](https://console.cloud.google.com/compute/instances?project=ggn-nmfs-afscdsm-dev-1&cloudshell=true&authuser=0).

2.  Click on the line associated with your username.

3.  Press START / RESUME on the menu bar above the list of instances. After a moment (you may need to refresh the page) the status icon for the instance will be a green circle with a checkmark instead of a gray circle with a square.

4.  On your local machine, open command prompt (Windows) or terminal (Mac/Linux).

5.  Paste in the following connection code, substituting `[SERVER NAME]` with the one that has been configured for you: `gcloud compute ssh --ssh-flag="-4 -L 8787:localhost:8787" [SERVER NAME] --project=ggn-nmfs-afscdsm-dev-1 --zone=us-east4-c --tunnel-through-iap`

    e.g. `gcloud compute ssh --ssh-flag="-4 -L 8787:localhost:8787" sophia-wassermann-sdm-node --project=ggn-nmfs-afscdsm-dev-1 --zone=us-east4-c --tunnel-through-iap`

6.  When you are done with your session, make sure to turn off the instance by pressing 'STOP' in the menu bar. The connection to the command line and Rstudio will be terminated and the status icon will return to the gray square. This is **very** important for keeping operating costs reasonable.

## Connecting to Rstudio Server

These instances have been built with a container image on top of rocker:rstudio that comes preconfigured with packages to run tinyVAST and sdmTMB workloads and to manage data ingress and egress through Oracle and Google Drive. This means that all further setup and operations are conducted from inside an Rstudio Server. Connecting is very easy, as the basic requirements and connections have already been set up by OFIS.

To connect:

1.  Once the connection has been established, go to your browser and navigate to `http://localhost:8787/`

2.  Log in using the username and password 'rstudio'

You should now be able to use Rstudio as you would on your local machine.

## Configuring SSH for github

Configuring an SSH key for your instance is required to push to github. It is possible to clone repositories using https, but you will not be able to push any changes. You will need to do the following in the Terminal within Rstudio Server.

1.  Generate a new SSH key and add it to the ssh-agent, following the [instructions for **Linux** on github](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent). You do not need to specify a 'file in which to save the key' or a passphrase.

2.  Once you have created the key and added it to the ssh-agent, follow the [github instructions for adding a new SSH key to your github account](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account), again following the Linux instructions. Make sure to save the key with an informative title, such as `gcp-rstudio-20250402`.

3.  Back in the Rstudio Server terminal, clone the github repository using SSH, using the command `git clone`. Make sure you are in the directory where you want the repo to be cloned; it will default to your 'home' directory, which will be fine for most circumstances. If you have created a folder within which you would like the repo to live, you can navigate inside of it with the command `cd`, followed by the directory name, in the Rstudio Server terminal. The address for a repository can be copied from its github page if you click the green `<> Code` button and select SSH.

    e.g. `git clone git@github.com:afsc-gap-products/model-based-indices.git`

4.  To connect the git integration in Rstudio with your cloned repository, you need to create an Rstudio Project associated with it. Click on the File menu in Rstudio Server -\> 'New Project' -\> 'Existing Directory' -\> browse to the cloned repo.

## Configuring Google Drive

Each instance is set up with a connection to a Google Drive associated with a unique email account. To connect the instance to your google account, you will need to run the following code to authenticate your credentials. The code will prompt you to provide your email address for Google Drive (which is likely your NOAA email).

```{r, eval = FALSE}
# googledrive::drive_auth(path="/etc/sa_key.json")  # connect to default account
library(gargle)
library(googledrive)

# Connect to google drive using your (probably NOAA) email
gdrive_email <- rstudioapi::showPrompt(title = "Email",
                                       message = "Email for Google Drive",
                                       default = "")

drive_auth(token = credentials_user_oauth2(
  scopes = "https://www.googleapis.com/auth/drive", 
  email = gdrive_email))

drive_user()  # check user account
```
